
@inject AuthenticationStateProvider AuthenticationStateProvider

@using EIMRentaaCar.Models
@using EIMRentaaCar.BLL

<div class="text-center">
    <a href=""><img src="/Imagen/E&M.gif" width="140" height="128" /></a>
</div>

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">E&M</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>

        <li class="nav-item px-1">

            <NavLink class="nav-link" @onclick="TogglePerfil">
                <span class="oi oi-person" aria-hidden="true"></span> Cuenta &nbsp; <span class="fa fa-chevron-down"></span>
            </NavLink>
            @if (statePerfil)
            {
                <ul class="children">
                    @if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
                    {
                        <li class="list-unstyled" style="color:white">
                            <NavLink>
                                <i class="oi oi-person"></i>Usuario: <span> @getName()</span>
                            </NavLink>
                        </li>
                        <li class="list-unstyled" style="color:white">
                            <NavLink>
                                <i class="oi oi-wrench"></i>Rol: <span> @getRol()</span>
                            </NavLink>
                        </li>
                        <li class="list-unstyled">
                            <NavLink class="nav-link" href="/logout?returnUrl=/">
                                <span class="oi oi-account-logout text-danger" aria-hidden="true"></span> Logout
                            </NavLink>
                        </li>
                    }

                </ul>

            }

        </li>

        <li class="nav-item px-3">
            <NavLink class="nav-link " href="Notify">
                <div class="text-center align-items-center">
                    <span class="fa fa-bell" aria-hidden="true"></span>
                    @if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
                    {
                        @if (Contador() > 0)
                        {
                            <span class="badge">@Contador()</span>//muestra la cantidad de notificacion respectivamente a cada usuario
                        }
                    }
                </div>
            </NavLink>
        </li>

        <li class="nav-item px-1">
            <NavLink class="nav-link" @onclick="ToggleRegistrosMenu">
                <span class="oi oi-document" aria-hidden="true"></span> Registros &nbsp; <span class="fa fa-chevron-down"></span>
            </NavLink>
            @if (stateRegister)
            {
        <ul class="children">

            <li class="list-unstyled">
                <NavLink class="nav-link" href="Cliente">
                    <span class="oi oi-people" aria-hidden="true"></span> Clientes
                </NavLink>
            </li>
            <li class="list-unstyled">
                <NavLink class="nav-link" href="Usuarios">
                    <span class="oi oi-people" aria-hidden="true"></span> Usuarios
                </NavLink>
            </li>
            <li class="list-unstyled">
                <NavLink class="nav-link" href="Importadores">
                    <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Importadores
                </NavLink>
            </li>
            <li class="list-unstyled">
                <NavLink class="nav-link" href="Bancos">
                    <span class="fa fa-bank" aria-hidden="true"></span>&nbsp; Bancos
                </NavLink>
            </li>
            <li class="list-unstyled">
                <NavLink class="nav-link" href="Vehiculos">
                    <span class="fa fa-car" aria-hidden="true"></span> &nbsp; Vehiculos
                </NavLink>
            </li>
            <li class="list-unstyled">
                <NavLink class="nav-link" href="Ventas">
                    <span class="oi oi-dollar" aria-hidden="true"></span> Ventas
                </NavLink>
            </li>
            <li class="list-unstyled">
                <NavLink class="nav-link" href="Renta">
                    <span class="oi oi-dollar" aria-hidden="true"></span> Rentas
                </NavLink>
            </li>
            <li class="list-unstyled">
                <NavLink class="nav-link" href="PagoVenta">
                    <span class="oi oi-dollar" aria-hidden="true"></span> Pago Venta
                </NavLink>
            </li>
            <li class="list-unstyled">
                <NavLink class="nav-link" href="PagoRenta">
                    <span class="oi oi-dollar" aria-hidden="true"></span> Pago Renta
                </NavLink>
            </li>
        </ul>
            }

        </li>

        <li class="nav-item px-1">

            <NavLink class="nav-link" @onclick="ToggleConsultasMenu">
                <span class="oi oi-graph" aria-hidden="true"></span> Consultas &nbsp; <span class="fa fa-chevron-down"></span>
            </NavLink>
            @if (stateConsultas)
            {
                <ul class="children">
                    <li class="list-unstyled">
                        <NavLink class="nav-link" href="ConsultaCliente">
                            <span class="oi oi-people" aria-hidden="true"></span> Clientes
                        </NavLink>
                    </li>
                    <li class="list-unstyled">
                        <NavLink class="nav-link" href="ConsultaImportador">
                            <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Importadores
                        </NavLink>
                    </li>
                    <li class="list-unstyled">
                        <NavLink class="nav-link" href="ConsultaBanco">
                            <span class="fa fa-bank" aria-hidden="true"></span>&nbsp; Bancos
                        </NavLink>
                    </li>
                    <li class="list-unstyled">
                        <NavLink class="nav-link" href="ConsultaVhiculos">
                            <span class="fa fa-car" aria-hidden="true"></span> &nbsp; Vehiculos
                        </NavLink>
                    </li>
                    <li class="list-unstyled">
                        <NavLink class="nav-link" href="ConsultaVentas">
                            <span class="oi oi-dollar" aria-hidden="true"></span> Ventas
                        </NavLink>
                    </li>
                    <li class="list-unstyled">
                        <NavLink class="nav-link" href="ConsultaRentas">
                            <span class="oi oi-dollar" aria-hidden="true"></span> Rentas
                        </NavLink>
                    </li>
                </ul>

            }

        </li>

    </ul>
</div>

<style>
    .badge {
        border-radius: 60% ;
        background-color: red;
    }
</style>


@code {

    Notificaciones notificaciones = new Notificaciones();

    public List<Notificaciones> lista { get; set; }

    private bool collapseNavMenu = true;
    private bool stateRegister = false;
    private bool stateConsultas = false;
    private bool statePerfil = false;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ToggleRegistrosMenu()
    {
        stateRegister = !stateRegister;
        stateConsultas = false;
        statePerfil = false;
    }

    private void ToggleConsultasMenu()
    {
        stateConsultas = !stateConsultas;
        stateRegister = false;
        statePerfil = false;
    }

    private void TogglePerfil()
    {
        statePerfil = !statePerfil;
        stateConsultas = false;
        stateRegister = false;
    }

    private string getRol()
    {
        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario != null)
        {
            return usuario.Roles;
        }
        else
        {
            return null;
        }

    }


    private string getName()
    {
        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario != null)
        {
            return usuario.Nombre;
        }
        else
        {
            return null;
        }

    }

    private int Contador() // aqui devuelvo la cantidad de notificaciones de los usuarios
    {
        lista = NotificacionBLL.GetList(n => true);

        try
        {

            lista = lista.Where(e => e.UsuarioId == getUser() && e.visto == false).ToList();

        }
        catch (Exception)
        {
            throw;
        }

        return lista.Count();
    }

    private int getUser()
    {
        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario != null)
        {
            return usuario.UsuarioId;
        }
        return 0;
    }

}