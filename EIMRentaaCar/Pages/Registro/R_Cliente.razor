@page "/Cliente"
@page "/Cliente/{ClienteId:int}"

@using EIMRentaaCar.Models
@using EIMRentaaCar.BLL
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IToastService toast

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated && getRol())
{
    <EditForm Model="cliente" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card w-75">
            <div class="card-header">
                <h1>Registro de Clientes</h1>
            </div>

            @*ClientesID y boton al lado*@
            <div class="card-body">
                <form />
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>ID</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="cliente.ClienteId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary" @onclick="Buscar"><i class="fa fa-search"></i> Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Nombres*@
                <div class="form-group">
                    <label>Nombre</label>
                    <InputText @bind-Value="cliente.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Nombre)" />
                </div>

                @*Fecha de Nacimiento*@
                <div class="form-group">
                    <label>Fecha de Nacimiento</label>
                    <InputDate @bind-Value="cliente.FechaNacimiento" class="form-control" />
                    <ValidationMessage For="@(() => cliente.FechaNacimiento)" />
                </div>

                @*Cedula*@
                <div class="form-group">
                    <label>Cédula </label>
                    <InputText @bind-Value="cliente.Cedula" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Cedula)" />
                </div>

                @*Telefono*@
                <div class="form-group">
                    <label>Teléfono </label>
                    <InputText @bind-Value="cliente.Telefono" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Telefono)" />
                </div>

                @*Dirección*@
                <div class="form-group">
                    <label>Dirección</label>
                    <InputText @bind-Value="cliente.Direccion" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Direccion)" />
                </div>

                @*Gmail*@
                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="cliente.Email" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Email)" />
                </div>

            </div>

            @*Botones*@
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="fa fa-plus"></i> Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success"><i class="fa fa-save"></i> Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="fa fa-trash"></i> Eliminar</button>
                </div>
            </div>

        </div>
    </EditForm>
}
else
{
    <h2 class="alert-danger" >No tiene permitido el acceso a este registro</h2>
}



@code{

    [Parameter]
    public int ClienteId { get; set; }

    Clientes cliente = new Clientes();
    private Usuarios Usuario = new Usuarios();

    Notificaciones notificaciones = new Notificaciones();

    public bool paso { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        if (ClienteId > 0)
        {
            var Auxclientes = ClientesBLL.Buscar(ClienteId);
            if (Auxclientes != null)
                this.cliente = Auxclientes;
            else
                toast.ShowWarning("No encontrado.");
        }

        cliente.UsuarioId = getUser();
    }

    private void Nuevo()
    {
        this.cliente = new Clientes();

    }

    private void Buscar()
    {
        if (cliente.ClienteId > 0)
        {
            var encontrado = ClientesBLL.Buscar(cliente.ClienteId);

            if (encontrado != null)
            {
                this.cliente = encontrado;
            }
            else
            {
                toast.ShowWarning("No encontrado");

                notificaciones.NotificacionId = 0;
                notificaciones.Titulo = "Error";
                notificaciones.Asunto = "Error en la busqueda en el registro de cliente";
                notificaciones.Fecha = DateTime.Now;
                notificaciones.UsuarioId = getUser();
                NotificacionBLL.Guardar(notificaciones);
            }
        }
    }

    private void Guardar()
    {
        bool guardo = ClientesBLL.Guardar(cliente);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = ClientesBLL.Eliminar(cliente.ClienteId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    private int getUser()
    {
        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario != null)
        {
            return usuario.UsuarioId;
        }
        return 0;
    }

    private bool getRol()
    {

        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario.Roles ==  "Administrador" || usuario.Roles =="Empleado")
        {
            return paso = true;
        }
        return paso = false;
    }

}