@page "/Vehiculos"
@page "/Vehiculos/{Id:int}"

@using EIMRentaaCar.Models
@using EIMRentaaCar.BLL

@inject IToastService toast
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated && getRol())
{
    <EditForm Model="vehiculos" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <h3>Registro de Vehiculos</h3>
            </div>

            <div class="card-body">
                <form>
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>ID:</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="vehiculos.VehiculoId" class="form-control" />
                                    <ValidationMessage For="@(() => vehiculos.VehiculoId)"></ValidationMessage>
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary" @onclick="Buscar"> <i class="fa fa-search"></i>  Buscar </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @* Fecha *@
                        <div class="col">
                            <div class="form-group">
                                <label>Fecha</label>
                                <InputDate @bind-Value="vehiculos.Fecha" class="form-control"></InputDate>
                                <ValidationMessage For="@(() => vehiculos.Fecha)"></ValidationMessage>
                            </div>
                        </div>

                    </div>

                    <div class="form-group">
                        <div class="form-row">
                            @* Marca *@
                            <div class="col">
                                <label>Marca:</label>
                                <InputText @bind-Value="vehiculos.Marca" class="form-control"></InputText>
                                <ValidationMessage For="@(()=>vehiculos.Marca)"></ValidationMessage>
                            </div>
                            @* Tipo *@
                            <div class="col">
                                <label>Tipo:</label>
                                <InputText @bind-Value="vehiculos.Tipo" class="form-control"></InputText>
                                <ValidationMessage For="@(()=>vehiculos.Tipo)"></ValidationMessage>
                            </div>

                            @*Modelo*@
                            <div class="col">
                                <label>Modelo:</label>
                                <InputText @bind-Value="vehiculos.Modelo" class="form-control"></InputText>
                                <ValidationMessage For="@(()=>vehiculos.Modelo)"></ValidationMessage>
                            </div>
                            @*Importador*@
                            <div class="col">
                                <label>Importador:</label>
                                <select @bind="vehiculos.ImportadorId" class="form-control">
                                    <option value=""> Elija un Importador </option>
                                    @foreach (var item in SelectImportador())
                                    {
                                        <option value="@item.ImportadorId">@item.Nombre</option>
                                    }
                                </select>
                            </div>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="form-row">
                            @* VIN *@
                            <div class="col">
                                <label>Vin:</label>
                                <InputText @bind-Value="vehiculos.Vin" class="form-control"></InputText>
                                <ValidationMessage For="@(()=>vehiculos.Vin)"></ValidationMessage>
                            </div>
                            @* Año *@
                            <div class="col">
                                <label>Año:</label>
                                <InputNumber @bind-Value="vehiculos.Año" class="form-control"></InputNumber>
                                <ValidationMessage For="@(()=>vehiculos.Año)"></ValidationMessage>
                            </div>
                            @*Estado*@
                            <div class="col">
                                <label>Estado:</label>
                                <select @bind="vehiculos.Estado" class="form-control">
                                    <option value="" selected disabled>Elija una estado</option>
                                    <option value="Disponible">Disponible</option>
                                    <option value="Rentado">Rentado</option>
                                    <option value="Vendido">Vendido</option>
                                </select>
                                <ValidationMessage For="@(() => vehiculos.Estado)" />
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="form-row">
                            @*Kilometraje*@
                            <div class="col">
                                <label>kilometraje:</label>
                                <InputNumber @bind-Value="vehiculos.Kilometraje" class="form-control"></InputNumber>
                                <ValidationMessage For="@(()=>vehiculos.Kilometraje)"></ValidationMessage>
                            </div>                                                   
                            @*Precio por dia*@
                            <div class="col">
                                <label>Precio por dia:</label>
                                <InputNumber @bind-Value="vehiculos.PrecioPorDia" class="form-control"></InputNumber>
                                <ValidationMessage For="@(()=>vehiculos.PrecioPorDia)"></ValidationMessage>
                            </div>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="form-row">
                            @*Precio de la venta*@
                            <div class="col">
                                <label>Precio de Venta:</label>
                                <InputNumber @bind-Value="vehiculos.PrecioVenta" class="form-control" @onfocusout="Calcular"></InputNumber>
                                <ValidationMessage For="@(()=>vehiculos.PrecioVenta)"></ValidationMessage>
                            </div>

                            @*Precio de ITEBIS *@
                            <div class="col">
                                <label>ITBIS:</label>
                                <InputNumber @bind-Value="vehiculos.ITBIS"  class="form-control" readonly="true"></InputNumber>
                                <ValidationMessage For="@(()=>vehiculos.ITBIS)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                </form>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="fa fa-plus"></i> Nuevo </button>
                    <button type="submit" class="btn btn-lg btn-success"><i class="fa fa-save"></i> Guardar </button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="fa fa-trash"></i> Eliminar </button>
                </div>
            </div>

        </div>
    </EditForm>
}



@code {

        [Parameter]
        public int Id { get; set; }
        Vehiculos vehiculos = new Vehiculos();
        Usuarios usuarios = new Usuarios();
    public bool paso { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        if (Id > 0)
        {
            var aux = VehiculosBLL.Buscar(Id);
            if (aux != null)
                this.vehiculos = aux;
            else
                toast.ShowWarning("No encontrado.");
        }

    }

    private List<Importadores> SelectImportador()
    {
        List<Importadores> lista = new List<Importadores>();

        try
        {
            lista = ImportadoresBLL.GetList(i => true);
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    private void Nuevo()
    {
        this.vehiculos = new Vehiculos();

    }

    private void Calcular()
    {
        if (vehiculos.PrecioVenta != 0)
        {
            vehiculos.ITBIS = Convert.ToDouble(vehiculos.PrecioVenta) * 0.18;
        }

    }

    private void Buscar()
    {
        if (vehiculos.VehiculoId > 0)
        {
            var encontrado = VehiculosBLL.Buscar(vehiculos.VehiculoId);

            if (encontrado != null)
                this.vehiculos = encontrado;
            else
            {
                toast.ShowWarning("No encontrado");
                NotificacionBLL.Mensaje(getUser(), "Error", "No se ha encotrado el vehiculo en la base de datos");
            }
        }
    }



    private void Guardar()
    {
        bool guardo;
        vehiculos.UsuarioId = getUser();
        guardo = VehiculosBLL.Guardar(vehiculos);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
            NotificacionBLL.Mensaje(getUser(), "Success", "Se ha guardado un vehiculo en la base de datos");
        }
        else
        {
            toast.ShowError("No fue posible guardar");
            NotificacionBLL.Mensaje(getUser(), "Error", "No fue posible guardar el vehiculo");
        }
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = VehiculosBLL.Eliminar(vehiculos.VehiculoId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
            NotificacionBLL.Mensaje(getUser(), "Success", "Se ha eliminado el vehiculo en la base de datos");
        }
        else
        {
            toast.ShowError("No fue posible eliminar");
            NotificacionBLL.Mensaje(getUser(), "Error", "No fue posible eliminar el vehiculo en la base de datos");
        }
    }

    private int getUser()
    {
        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario != null)
        {
            return usuario.UsuarioId;
        }
        return 0;
    }

    private bool getRol()
    {

        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario.Roles == "Administrador" || usuario.Roles == "Empleado")
        {
            return paso = true;
        }
        return paso = false;
    }
}