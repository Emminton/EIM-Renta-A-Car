@page "/Renta"
@page "/Renta/{RentaId:int}"

@using EIMRentaaCar.Models
@using EIMRentaaCar.BLL

@inject IToastService toast
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated && getRol())
{
    <EditForm Model="rentas" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <h1>Registro de Rentas</h1>
            </div>

            @*Renta ID y boton al lado*@
            <div class="card-body">
                <form>
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>ID</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="rentas.RentaId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary" @onclick="Buscar"><i class="fa fa-search"></i> Buscar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <br />
                        <div class="col">
                            @*Fecha de la Renta*@
                            <div class="form-group">
                                <label>Fecha de la Renta</label>
                                <InputDate @bind-Value="rentas.FechaRenta" class="form-control col-4" />
                                <ValidationMessage For="@(() => rentas.FechaRenta)" />
                            </div>
                        </div>
                    </div>

                    @* Vehiculo id *@
                    <div class="form-group">
                        <div class="form-row">

                            @* Cliente id *@
                            <div class="col">
                                <label>Cedula de Cliente :</label>
                                <select class="form-control" @bind="SelecionCliente" @onclick="MostrarNombreCliente">
                                    @foreach (var item in ClienteCombo())
                                    {
                                        <option value="@item.ClienteId">@item.Cedula</option>
                                    }
                                </select>
                            </div>

                            @* cliente *@
                            <div class="col">
                                <label>El Cliente:</label>
                                <InputText class="form-control" readonly="true" @bind-Value="nombreCliente" />
                            </div>

                            <div class="col">
                                <label>Vin de Vehiculo:</label>
                                <select class="form-control" @bind="SelecionVehiculo" @onclick="MostrarVehiculo">
                                    @foreach (var item in VehiculoCombo())
                                    {

                                        @if (item.Estado == "Disponible")
                                        {
                                            <option value="@item.VehiculoId">@item.VehiculoId</option>
                                        }
                                    }

                                </select>
                            </div>
                            @* Marca *@
                            <div class="col">
                                <label>La Marca:</label>
                                <InputText class="form-control" readonly="true" @bind-Value="Marca" />
                            </div>

                            @* Modelo// *@
                            <div class="col">
                                <label>El Modelo:</label>
                                <InputText class="form-control" readonly="true" @bind-Value="Modelo" />
                            </div>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="row">
                            <div class="col">
                                <label>Precio</label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="Precio" />
                            </div>
                            <div class="col">
                                <label>VIN</label>
                                <InputText class="form-control" readonly="true" @bind-Value="Vin" />
                            </div>
                            <div class="col">
                                <label>Kilometro</label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="KM" />
                            </div>
                            <div class="col">
                                <label>Año</label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="Año" />
                            </div>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="col">
                            <label><strong>Tiempo De Renta</strong></label>
                            <div class="input-group">
                                <InputNumber @bind-Value="rentas.TiempoRenta" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-info" @onclick="Agregar"><i class="fa fa-plus"> Agregar </i></button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <br />

                    @*Detalle*@
                    <div class="table-responsive text-nowrap">
                        <table class="table table-striped">
                            <thead class="thead-dark">
                                <tr>
                                    <th>Dias</th>
                                    <th>Monto</th>
                                    <th>Balance</th>
                                    <th>Estado de Pago</th>
                                    <th>        </th>
                                </tr>
                            </thead>
                            <tbody class="bg-white">
                                @foreach (var item in rentas.PagoDetalle)
                                {
                                    <tr>
                                        <td>@item.Dias</td>
                                        <td>@item.Monto</td>
                                        <td>@item.Balance</td>
                                        <td><InputCheckbox  @bind-Value="item.Pagada" readonly="true" /></td>
                                        <td><button type="button" class="btn btn-danger" @onclick="(() => EliminarOrdenDetalle(item))"><i class="oi oi-trash"></i> Remover</button> </td>
                                    </tr>
                                }

                            </tbody>

                        </table>
                    </div>

                    <div class="form-group">
                        <div class="row">
                            <div class="col">
                                <label><strong>Total A Pagar</strong></label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="rentas.Balance"/>
                            </div>

                        </div>
                    </div>
                </form>
            </div>
            @*Botones*@
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="fa fa-plus"></i> Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success"><i class="fa fa-save"></i> Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="fa fa-trash"></i> Eliminar</button>
                    <button type="button" class="btn btn-lg btn-warning" data-toggle="modal" @onclick="PDF" data-target="#myModals"><i class="oi oi-print"></i> Imprimir</button>
                </div>
            </div>
        </div>
    </EditForm>
}

<div class="modal fade" id="myModals" tabindex="-1" role="dialog" aria-labelledby="myModalsLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content m-md-auto">
            <div class="modal-header">
                <button type="button" class="close text-danger" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title"></h4>
            </div>
            <div class="modal-body">
                <div style="text-align: center;">
                    <iframe src="@pdfContent" style="width:950px; height:600px;" frameborder="0"></iframe>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>

@code   {

    [Parameter]
    public int RentaId { get; set; }
    Rentas rentas = new Rentas();

    @*Datos Del Vehiculo*@
    public int SelecionVehiculo { get; set; }

    public string Marca { get; set; }
    public string Modelo { get; set; }
    public decimal Precio { get; set; }
    public string Vin { get; set; }
    public decimal KM { get; set; }
    public int Año { get; set; }

    public bool paso { get; set; }
    Usuarios usuarios = new Usuarios();

    @*Datos Del Cliente*@
    public string nombreCliente { get; set; }
    public int SelecionCliente { get; set; }

    public byte[] Data { get; set; }
    public string pdfContent { get; set; }



    protected override void OnInitialized()
    {
        Nuevo();
        if (RentaId > 0)
        {
            var AuxRenta = RentasBLL.Buscar(RentaId);
            if (AuxRenta != null)
                this.rentas = AuxRenta;
            else
                toast.ShowWarning("No encontrado.");
        }

    }

    private void Nuevo()
    {
        this.rentas = new Rentas();
        Marca = string.Empty;
        Modelo = string.Empty;
        Precio = 0;
        Vin = string.Empty;
        KM = 0;
        Año = 0;
        nombreCliente = string.Empty;
        SelecionCliente = 0;
        SelecionVehiculo = 0;

    }

    private void MostrarVehiculo()
    {

        var Rentavehiculos = VehiculosBLL.Buscar(SelecionVehiculo);

        if (Rentavehiculos != null)
        {
            Marca = Rentavehiculos.Marca;
            Modelo = Rentavehiculos.Modelo;
            Precio = Rentavehiculos.PrecioPorDia;
            KM = Rentavehiculos.Kilometraje;
            Vin = Rentavehiculos.Vin;
            Año = Rentavehiculos.Año;
        }

    }

    private void MostrarNombreCliente()
    {
        var auxCliente = ClientesBLL.Buscar(SelecionCliente);
        if (auxCliente != null)
        {
            nombreCliente = auxCliente.Nombre;

        }
    }

    private void Buscar()
    {
        if (rentas.RentaId > 0)
        {
            var encontrado = RentasBLL.Buscar(rentas.RentaId);

            if (encontrado != null)
            {
                this.rentas = encontrado;
                SelecionVehiculo = rentas.VehiculoId;

            }
            else
            {
                toast.ShowWarning("No encontrado");
                NotificacionBLL.Mensaje(getUser(), "Error", "No se ha encontrado la renta en la base de datos");
            }
        }
    }

    private void Guardar()
    {



        if (VehiculosBLL.Buscar(SelecionVehiculo).Estado == "Vendido")
        {
            toast.ShowError("No se puede realizar la renta por que el vehiculo fue Vendido");

        }
        else
        {
            rentas.UsuarioId = getUser();
            bool guardo = RentasBLL.Guardar(rentas);

            if (guardo)
            {
                Nuevo();
                SelecionCliente = 0;
                SelecionVehiculo = 0;
                Marca = string.Empty;
                Modelo = string.Empty;
                Precio = 0;
                Vin = string.Empty;
                KM = 0;
                Año = 0;
                nombreCliente = string.Empty;
                toast.ShowSuccess("Guardado correctamente");
                NotificacionBLL.Mensaje(getUser(), "Success", "Se ha guardado la renta en al base de datos");
            }
            else
            {
                toast.ShowError("No fue posible guardar");
                NotificacionBLL.Mensaje(getUser(), "Error", "No fue pos posible guardar la renta en la base de datos");
            }
        }


    }

    private void Eliminar()
    {
        bool elimino;

        elimino = RentasBLL.Eliminar(rentas.RentaId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    private List<Clientes> ClienteCombo()
    {
        List<Clientes> lista = new List<Clientes>();

        try
        {
            lista = ClientesBLL.GetList(c => true);
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    private List<Vehiculos> VehiculoCombo()
    {
        List<Vehiculos> lista = new List<Vehiculos>();

        try
        {
            lista = VehiculosBLL.GetList(v => true);
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    private void Agregar()
    {
        if (rentas.TiempoRenta == 0)
        {
            toast.ShowWarning("Tiene que poner los Dias .");
            return;
        }

        if (SelecionCliente == 0 && SelecionVehiculo == 0)
        {
            toast.ShowWarning("Tiene que seleccionar un cliente y un vehiculo Id");
            return;
        }

        if (rentas.TiempoRenta <= 0)
        {
            toast.ShowWarning("La cuotas debe ser mayor a 0.");
            return;
        }
        else
        {
            for (int i = 0; i < rentas.TiempoRenta; i++)
            {
                this.rentas.PagoDetalle.Add(new PagoDetalles
                {
                    PagoId = 0,
                    RentaId = rentas.RentaId,
                    UsuarioId = getUser(),
                    Monto = VehiculosBLL.Buscar(SelecionVehiculo).PrecioPorDia,
                    Balance = VehiculosBLL.Buscar(SelecionVehiculo).PrecioPorDia,
                    Pagada = false,
                    Dias = (1 + i)
                });
            }

            if (rentas.PagoDetalle.Count > 0)
            {
                rentas.Balance = rentas.PagoDetalle[0].Monto;
            }



            CalcularBalance();
        }
    }

    private void EliminarOrdenDetalle(PagoDetalles detalle)
    {
        try
        {
            rentas.PagoDetalle.Remove(detalle);
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void CalcularBalance()
    {
        rentas.Balance = 0;
        foreach (PagoDetalles cuota in rentas.PagoDetalle)
        {
            if (!cuota.Pagada)
            {
                rentas.Balance += cuota.Balance;
            }
        }

    }

    private int getUser()
    {
        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario != null)
        {
            return usuario.UsuarioId;
        }
        return 0;
    }

    private bool getRol()
    {

        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario.Roles == "Administrador" || usuario.Roles == "Empleado")
        {
            return paso = true;
        }
        return paso = false;
    }

    private void PDF()
    {
        if (RentasBLL.Buscar(rentas.RentaId)==null)
        {
            toast.ShowInfo("Tienes que guardar la renta primero");
        }
        else
        {
            EIMRentaaCar.Pages.Reportes.FacturaRenta factura = new Reportes.FacturaRenta();

            Data = factura.Reporte(rentas);

            pdfContent = "data:application/pdf;base64,";
            pdfContent += System.Convert.ToBase64String(Data);
        }
    }
}
