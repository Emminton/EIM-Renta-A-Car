@page "/Renta"

@using Models
@using BLL

@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated && getRol())
{
    <EditForm Model="rentas" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card w-75">
            <div class="card-header">
                <h1>Registro de Clientes</h1>
            </div>

            @*ClientesID y boton al lado*@
            <div class="card-body">
                <form/>
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>ID</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="rentas.RentaId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary" @onclick="Buscar"><i class="fa fa-search"></i> Buscar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
            </div>
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    @*<button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="fa fa-plus"></i> Nuevo</button>*@
                    <button type="submit" class="btn btn-lg btn-success"><i class="fa fa-save"></i> Guardar</button>
                    @*<button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="fa fa-trash"></i> Eliminar</button>*@
                </div>
            </div>
        </div>
  
 </EditForm>
  }

 @code {

     Rentas rentas = new Rentas();
     public bool  paso  { get; set; }


     private void Buscar()
     {
         if (rentas.RentaId > 0)
         {

             var encontrado = RentasBLL.Buscar(rentas.RentaId);

             if (encontrado != null)
             {
                 this.rentas = encontrado;
             }
             else
             {
                 toast.ShowWarning("No encontrado");

                 NotificacionBLL.Mensaje(getUser(), "Error", "No se ha encontrado el cliente en la base de datos");
             }
         }
     }

     private void Guardar()
     {
         rentas.UsuarioId = getUser();
         bool guardo = RentasBLL.Guardar(rentas);

         if (guardo)
         {

             toast.ShowSuccess("Guardado correctamente");
             NotificacionBLL.Mensaje(getUser(), "Success", "Se ha guardado el cliente en la base de datos");
         }
         else
         {
             toast.ShowError("No fue posible guardar");
             NotificacionBLL.Mensaje(getUser(), "Error", "No se ha guardado el cliente en la base de datos");
         }
     }

     private int getUser()
     {
         Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

         if (usuario != null)
         {
             return usuario.UsuarioId;
         }
         return 0;
     }

     private bool getRol()
     {

         Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

         if (usuario.Roles == "Administrador" || usuario.Roles == "Empleado")
         {
             return paso = true;
         }
         return paso = false;
     }



     }
