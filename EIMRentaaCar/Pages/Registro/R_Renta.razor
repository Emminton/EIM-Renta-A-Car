@page "/Renta"
@page "/Renta/{RentaId:int}"

@using EIMRentaaCar.Models
@using EIMRentaaCar.BLL

@inject IToastService toast


<EditForm Model="rentas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Registro de Rentas</h1>
        </div>

        @*Renta ID y boton al lado*@
        <div class="card-body">
            <form>
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>ID</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="rentas.RentaId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary" @onclick="Buscar"><i class="fa fa-search"></i> Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @* Vehiculo id *@
                <div class="form-group">
                    <div class="form-row">
                        <div class="col">
                            <label>Vehiculo ID:</label>
                            <select class="form-control" @bind="SelecionVehiculo" @onclick="MostrarVehiculo">
                                @foreach (var item in VehiculoCombo())
                                {
                                    <option value="@item.VehiculoId">@item.VehiculoId</option>
                                }
                            </select>
                        </div>
                        @* Marca *@
                        <div class="col">
                            <label>La Marca:</label>
                            <InputText class="form-control" readonly="true" @bind-Value="VehiculoMarca" />
                        </div>

                        @* Modelo *@
                        <div class="col">
                            <label>El Modelo:</label>
                            <InputText class="form-control" readonly="true" @bind-Value="VehiculoModelo" />
                        </div>

                        @* Cliente id *@
                        <div class="col">
                            <label>Cliente ID:</label>
                            <select class="form-control" @bind="SelecionCliente" @onclick="MostrarNombreCliente">
                                @foreach (var item in ClienteCombo())
                                {
                                    <option value="@item.ClienteId">@item.ClienteId</option>
                                }
                            </select>
                        </div>
                        @* cliente *@
                        <div class="col">
                            <label>El Cliente:</label>
                            <InputText class="form-control" readonly="true" @bind-Value="nombreCliente" />
                        </div>

                    </div>
                </div>

                @*Fecha de la Renta*@
                <div class="form-group">
                    <label>Fecha de la Renta</label>
                    <InputDate @bind-Value="rentas.FechaRenta" class="form-control" />
                    <ValidationMessage For="@(() => rentas.FechaRenta)" />
                </div>

                @*Tiempo de Renta*@
                <div class="form-group">
                    <label>Tiempo De Renta </label>
                    <InputNumber @bind-Value="rentas.TiempoRenta" class="form-control" />
                    <ValidationMessage For="@(() => rentas.TiempoRenta)" />
                </div>
            </form>
        </div>
        @*Botones*@
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="fa fa-plus"></i> Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success"><i class="fa fa-save"></i> Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="fa fa-trash"></i> Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code
{

[Parameter]
public int RentaId { get; set; }
Rentas rentas = new Rentas();
@*Datos Del Vehiculo*@

public int SelecionVehiculo {get; set;}
public string VehiculoMarca { get; set; }
public string VehiculoModelo { get; set; }

    @*Datos Del Cliente*@
public string nombreCliente { get; set; }
public int SelecionCliente{ get; set; }



protected override void OnInitialized()
{
    Nuevo();
    if (RentaId > 0)
    {
        var AuxRenta = RentasBLL.Buscar(RentaId);
        if (AuxRenta != null)
            this.rentas = AuxRenta;
        else
            toast.ShowWarning("No encontrado.");
    }
}

private void Nuevo()
{
    this.rentas = new Rentas();

}

private void MostrarVehiculo()
{

    var Rentavehiculos = VehiculosBLL.Buscar(SelecionVehiculo);

    if (Rentavehiculos != null)
    {
        VehiculoMarca = Rentavehiculos.Marca;
        VehiculoModelo = Rentavehiculos.Modelo;
       

    }

}

private void MostrarNombreCliente()
{
    var auxCliente = ClientesBLL.Buscar(SelecionCliente);
    if (auxCliente != null)
    {
        nombreCliente = auxCliente.Nombre;

    }
}

private void Buscar()
{
    if (rentas.RentaId > 0)
    {
        var encontrado = RentasBLL.Buscar(rentas.RentaId);

        if (encontrado != null)
            this.rentas = encontrado;
        else
            toast.ShowWarning("No encontrado");
    }
}

private void Guardar()
{
    bool guardo;

    guardo = RentasBLL.Guardar(rentas);

    if (guardo)
    {
        Nuevo();
        toast.ShowSuccess("Guardado correctamente");
    }
    else
        toast.ShowError("No fue posible guardar");
}

private void Eliminar()
{
    bool elimino;

    elimino = RentasBLL.Eliminar(rentas.RentaId);

    if (elimino)
    {
        Nuevo();
        toast.ShowSuccess("Eliminado correctamente");
    }
    else
        toast.ShowError("No fue posible eliminar");
}

private List<Clientes> ClienteCombo()
{
    List<Clientes> lista = new List<Clientes>();

    try
    {
        lista = ClientesBLL.GetList(c => true);
    }
    catch (Exception)
    {
        throw;
    }

    return lista;
}

private List<Vehiculos> VehiculoCombo()
{
    List<Vehiculos> lista = new List<Vehiculos>();

    try
    {
        lista = VehiculosBLL.GetList(v => true);
    }
    catch (Exception)
    {
        throw;
    }

    return lista;
}
}