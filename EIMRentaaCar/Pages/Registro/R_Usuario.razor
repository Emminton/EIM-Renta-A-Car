@page "/Usuarios"
@page "/Usuarios/{Id:int}"

@using EIMRentaaCar.BLL
@using EIMRentaaCar.Models


@inject IToastService toast
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated && getRol())
{
    <EditForm Model="usuarios" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <h3>Registro de Usuario</h3>
            </div>

            <div class="card-body">
                <form>

                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>ID:</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="usuarios.UsuarioId" class="form-control col-4" />
                                    <ValidationMessage For="@(() => usuarios.UsuarioId)"></ValidationMessage>
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary" @onclick="Buscar"> <i class="fa fa-search"></i>  Buscar </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Nombres*@
                    <div class="form-group">
                        <label>Nombre:</label>
                        <InputText @bind-Value="usuarios.Nombre" class="form-control " />
                        <ValidationMessage For="@(() => usuarios.Nombre)" />
                    </div>

                    @*Nombre de usuario*@
                    <div class="form-group">
                        <label>Nombre de usuario:</label>
                        <InputText @bind-Value="usuarios.UserName" class="form-control " />
                        <ValidationMessage For="@(() => usuarios.UserName)" />
                    </div>

                    @*Email*@
                    <div class="form-group">
                        <label>Email:</label>
                        <InputText @bind-Value="usuarios.Email" class="form-control " />
                        <ValidationMessage For="@(() => usuarios.Email)" />
                    </div>

                    @*Clave*@
                    <div class="form-group">
                        <label>Clave</label>
                        <InputText type="password" class="form-control " @bind-Value="usuarios.Password"></InputText>
                        <ValidationMessage For="@(() => usuarios.Password)" />
                    </div>

                    @*confirmar clave*@
                    <div class="form-group">
                        <label>Confirmar Clave</label>
                        <InputText type="password" class="form-control " @bind-Value="usuarios.ConfirmarPassword"></InputText>
                        <ValidationMessage For="@(() => usuarios.ConfirmarPassword)" />
                    </div>

                    @if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador"))
                    {
                        @*Rol*@
                        <div class="form-group">
                            <label>Roles de usuarios</label>
                            <InputSelect @bind-Value="@usuarios.Roles" class="form-control">
                                <option value="" disabled selected>Seleccione un Rol</option>
                                <option value="Administrador">Administrador</option>
                                <option value="Empleado">Empleado</option>
                                <option value="Normal">Normal</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => usuarios.Roles)" />
                        </div>
                    }
                    @*Fecha*@
                    <div class="form-group">
                        <label>Fecha</label>
                        <InputDate @bind-Value="usuarios.FechaIngreso" class="form-control "></InputDate>
                        <ValidationMessage For="@(() => usuarios.FechaIngreso)"></ValidationMessage>
                    </div>



                </form>
            </div>
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="fa fa-plus"></i> Nuevo </button>
                    <button type="submit" class="btn btn-lg btn-success"><i class="fa fa-save"></i> Guardar </button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="fa fa-trash"></i> Eliminar </button>
                </div>
            </div>
        </div>
    </EditForm>
}



@code {

    Usuarios usuarios = new Usuarios();

    [Parameter]
    public int Id { get; set; }
    public bool paso { get; set; }
    public string direccion { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador"))
        {
            if (Id > 0)
            {
                var Auxclientes = UsuarioBLL.Buscar(Id);
                if (Auxclientes != null)
                    this.usuarios = Auxclientes;
                else
                    toast.ShowWarning("No encontrado.");
            }
        }
    }

    private void Nuevo()
    {
        this.usuarios = new Usuarios();
    }

    private void Guardar()
    {

        bool paso;
        paso = UsuarioBLL.Guardar(usuarios);
        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador"))
        {
            var validar = UsuarioBLL.ConfirmarClaves(usuarios.Password, usuarios.ConfirmarPassword);
            if ( validar != true)
            {

                toast.ShowWarning("Las claves no coinciden");
                NotificacionBLL.Mensaje(getUser(), "Info", "Las clave que ha insertado no coincide");
            }
            else
            {
                if (paso)
                {
                    Nuevo();
                    toast.ShowSuccess("Guardado Correctamente");
                    NotificacionBLL.Mensaje(getUser(), "Success", "Se ha agregado un nuevo usuario");
                }
                else
                {
                    toast.ShowError("No fue posible guardar");
                    NotificacionBLL.Mensaje(getUser(), "Error", "Se ha eliminado un usuario de la base de datos");
                }
            }
        }
        else
        {
            toast.ShowError("No puedes modificar tu datos porque no eres administrador");
            NotificacionBLL.Mensaje(getUser(), "Info", "No puedes modificar tu datos porque no eres administrador");
        }

    }

    private void Buscar()
    {
        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador"))
        {
            var encontrado = UsuarioBLL.Buscar(usuarios.UsuarioId);
            if (encontrado != null)
            {

                this.usuarios = encontrado;
                usuarios.Password = UsuarioBLL.DesEncriptar(usuarios.Password);
                usuarios.ConfirmarPassword = UsuarioBLL.DesEncriptar(usuarios.ConfirmarPassword);
            }
            else
            {
                toast.ShowWarning("No encontrado");
                NotificacionBLL.Mensaje(getUser(), "Error", "No se ha encontrado el usuario en la base de datos");
            }
        }
        else
        {
            toast.ShowError("No puedes buscar datos porque no eres administrador");
            NotificacionBLL.Mensaje(getUser(), "Info", "No puedes buscar datos porque no eres administrador");
        }
    }

    private void Eliminar()
    {

        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador"))
        {
            bool eliminar;
            eliminar = UsuarioBLL.Eliminar(usuarios.UsuarioId);

            if (eliminar)
            {
                Nuevo();
                toast.ShowSuccess("Eliminado Correctamente");
                NotificacionBLL.Mensaje(getUser(), "Succes", "Se ha eliminado el usuario de la base de datos");
            }
            else
            {
                toast.ShowError("No fue posible eliminar");
                NotificacionBLL.Mensaje(getUser(), "Error", "No fue posible eliminar el usuario de la base de datos");
            }
        }
        else
        {
            toast.ShowError("No puedes eliminar datos porque no eres administrador");
            NotificacionBLL.Mensaje(getUser(), "Info", "No puedes eliminar datos porque no eres administrador");
        }
    }

    private bool getRol()
    {

        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario.Roles == "Administrador" || usuario.Roles == "Empleado")
        {
            return paso = true;
        }
        return paso = false;
    }

    private int getUser()
    {
        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario != null)
        {
            return usuario.UsuarioId;
        }
        return 0;
    }

}
