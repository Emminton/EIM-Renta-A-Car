@page "/Ventas"
@page "/Ventas/{VentaId:int}"

@using EIMRentaaCar.Models
@using EIMRentaaCar.BLL

@inject IToastService toast

<EditForm Model="ventas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>registro de ventas</h1>
        </div>
        <div class="card-body">
            <form>

                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>ID</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="ventas.VentaId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary" @onclick="Buscar"><i class="fa fa-search"></i> Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        @* Cliente id *@
                        <div class="col">
                            <label>Cliente ID:</label>
                            <select class="form-control" @bind="ClienteSelecionado" @onclick="MostrarNombreCliente">
                                @foreach (var item in ClienteCombo())
                                {
                                    <option value="@item.ClienteId">@item.ClienteId</option>
                                }
                            </select>
                        </div>
                        @* cliente *@
                        <div class="col">
                            <label>El Cliente:</label>
                            <InputText class="form-control" readonly="true" @bind-Value="nombreCliente" />
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col">
                            <label>Vehiculo Id</label>
                            <select class="form-control" @bind="Vehiculoseleccionado" @onclick="MostrarVehiculo">
                                @foreach (var item in VehiculoCombo())
                                {
                                    <option value="@item.VehiculoId">@item.VehiculoId</option>
                                }
                            </select>
                        </div>

                        <div class="col">
                            <label>Marca</label>
                            <InputText class="form-control" readonly="true" @bind-Value="Marca" />
                        </div>

                        <div class="col">
                            <label>Tipo</label>
                            <InputText class="form-control" readonly="true" @bind-Value="Tipo" />
                        </div>

                        <div class="col">
                            <label>Modelo</label>
                            <InputText class="form-control" readonly="true" @bind-Value="Modelo" />
                        </div>

                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col">
                            <label>Precio</label>
                            <InputNumber class="form-control" readonly="true" @bind-Value="Precio" />
                        </div>
                        <div class="col">
                            <label>VIN</label>
                            <InputNumber class="form-control" readonly="true" @bind-Value="Vin" />
                        </div>
                        <div class="col">
                            <label>KM</label>
                            <InputNumber class="form-control" readonly="true" @bind-Value="KM" />
                        </div>
                        <div class="col">
                            <label>Año</label>
                            <InputNumber class="form-control" readonly="true" @bind-Value="Año" />
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="col">
                        <div class="input-group">
                            <InputNumber @bind-Value="ventas.Cuotas" class="form-control col-4" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-info" @onclick="Agregar"><i class="fa fa-plus"> Agregar </i></button>
                            </div>
                        </div>
                    </div>
                </div>

            </form>
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]
    public int VentaId { get; set; }

    Ventas ventas = new Ventas();

    @*Datos Del Cliente*@
public int ClienteSelecionado { get; set; }
public string nombreCliente { get; set; }

    @*Datos Del Cliente*@
    public int Vehiculoseleccionado { get; set; }
    public string Marca { get; set; }
    public string Modelo { get; set; }
    public decimal Precio { get; set; }
    public int Vin { get; set; }
    public decimal KM { get; set; }
    public int Año { get; set; }
    public string Tipo { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        if (VentaId > 0)
        {
            var Auxventas = VentasBLL.Buscar(VentaId);
            if (Auxventas != null)
                this.ventas = Auxventas;
            else
                toast.ShowWarning("No encontrado.");
        }
    }

    private void Nuevo()
    {
        this.ventas = new Ventas();

    }

    private void Buscar()
    {
        if (ventas.VentaId > 0)
        {
            var encontrado = VentasBLL.Buscar(ventas.VentaId);

            if (encontrado != null)
                this.ventas = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
    }

    private void Guardar()
    {

        bool guardo = VentasBLL.Guardar(ventas);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = VentasBLL.Eliminar(ventas.VentaId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    private List<Clientes> ClienteCombo()
    {
        List<Clientes> lista = new List<Clientes>();

        try
        {
            lista = ClientesBLL.GetList(c => true);
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    private List<Vehiculos> VehiculoCombo()
    {
        List<Vehiculos> lista = new List<Vehiculos>();

        try
        {
            lista = VehiculosBLL.GetList(c => true);
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    private void MostrarNombreCliente()
    {
        string auxVenta = string.Empty;

        var auxCliente = ClientesBLL.Buscar(ClienteSelecionado);
        if (auxCliente != null)
        {
            auxVenta = ClientesBLL.Buscar(auxCliente.ClienteId).Nombre;
            nombreCliente = auxVenta;
        }
        ventas.ClienteId = ClienteSelecionado;
    }

    private void MostrarVehiculo()
    {
        string auxmarcar = string.Empty;
        string auxModelo = string.Empty;
        decimal auxPrecio = 0;
        int auxVin = 0;
        decimal auxKM = 0;
        int auxAño = 0;
        string auxTipo = string.Empty;

        var auxventa = VehiculosBLL.Buscar(Vehiculoseleccionado);
        if (auxventa != null)
        {
            auxmarcar = VehiculosBLL.Buscar(auxventa.VehiculoId).Marca;
            auxModelo = VehiculosBLL.Buscar(auxventa.VehiculoId).Modelo;
            auxPrecio = VehiculosBLL.Buscar(auxventa.VehiculoId).PrecioVenta;
            auxVin = VehiculosBLL.Buscar(auxventa.VehiculoId).Vin;
            auxKM = VehiculosBLL.Buscar(auxventa.VehiculoId).Kilometraje;
            auxAño = VehiculosBLL.Buscar(auxventa.VehiculoId).Año;
            auxTipo = VehiculosBLL.Buscar(auxventa.VehiculoId).Tipo;
            Marca = auxmarcar;
            Modelo = auxModelo;
            Precio = auxPrecio;
            Vin = auxVin;
            KM = auxKM;
            Año = auxAño;
            Tipo = auxTipo;
        }
        ventas.VehiculoId = Vehiculoseleccionado;
    }

    private void Agregar()
    {
        if (ventas.Cuotas == 0)
        {
            toast.ShowWarning("Tiene que poner las cuotas.");
            return;
        }

        if (ventas.Cuotas <= 0)
        {
            toast.ShowWarning("La cuotas debe ser mayor a 0.");
            return;
        }
        else
        {
            for (int i = 0; i < ventas.Cuotas; i++)
            {
                this.ventas.CuotaDetalles.Add(new CuotaDetalles
                {
                    CuotaId = 0,
                    VentaId = ventas.VentaId,
                    UsuarioId = 0,
                    Monto = 0.0m,
                    Balance = VehiculosBLL.Buscar(Vehiculoseleccionado).PrecioPorDia,
                    Pagada = false,
                    Numero = (1 + i)
                });
            }




        }

    }

}