@page "/Importadores"
@page "/Importadores/{Id:int}"

@using EIMRentaaCar.Models
@using EIMRentaaCar.BLL

@inject IToastService toast
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated && getRol())
{
    <EditForm Model="importadores" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card w-75">
            <div class="card-header">
                <h1>Registro de Importadores</h1>
            </div>

            @*Importador Id y boton al lado*@
            <div class="card-body">
                <form />
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>ID</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="importadores.ImportadorId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary" @onclick="Buscar"><i class="fa fa-search"></i> Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Nombres*@
                <div class="form-group">
                    <label>Nombre</label>
                    <InputText @bind-Value="importadores.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => importadores.Nombre)" />
                </div>

                @*Telefono*@
                <div class="form-group">
                    <label>Teléfono </label>
                    <InputText @bind-Value="importadores.Telefono" class="form-control" />
                    <ValidationMessage For="@(() => importadores.Telefono)" />
                </div>

                @*Gmail*@
                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="importadores.Email" class="form-control" />
                    <ValidationMessage For="@(() => importadores.Email)" />
                </div>

            </div>

            @*Botones*@
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="fa fa-plus"></i> Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success"><i class="fa fa-save"></i> Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="fa fa-trash"></i> Eliminar</button>
                </div>
            </div>

        </div>
    </EditForm>
}



@code
{
    [Parameter]
    public int Id { get; set; }
    Usuarios usuarios = new Usuarios();
    Importadores importadores = new Importadores();
    public bool paso { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        if (Id > 0)
        {
            var Auximportadores = ImportadoresBLL.Buscar(Id);
            if (Auximportadores != null)
                this.importadores = Auximportadores;
            else
                toast.ShowWarning("No encontrado.");
        }
        importadores.UsuarioId = getUser();
    }

    private void Nuevo()
    {
        this.importadores = new Importadores();

    }

    private void Buscar()
    {
        if (importadores.ImportadorId > 0)
        {
            var encontrado = ImportadoresBLL.Buscar(importadores.ImportadorId);

            if (encontrado != null)
                this.importadores = encontrado;
            else
            {
                toast.ShowWarning("No encontrado");
                NotificacionBLL.Mensaje(getUser(), "Error", "No se ha encontrado el importador en la base de datos");
            }
        }
    }

    private void Guardar()
    {
        bool guardo;

        guardo = ImportadoresBLL.Guardar(importadores);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
            NotificacionBLL.Mensaje(getUser(), "Success", "Se ha guardado el importador en la base de datos");
        }
        else
        {
            toast.ShowError("No fue posible guardar");
            NotificacionBLL.Mensaje(getUser(), "Error", "No se ha guardado el importador en la base de datos");
        }
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = ImportadoresBLL.Eliminar(importadores.ImportadorId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
            NotificacionBLL.Mensaje(getUser(), "Success", "Se ha eliminado el importador en la base de datos");
        }
        else
        {
            toast.ShowError("No fue posible eliminar");
            NotificacionBLL.Mensaje(getUser(), "Error", "No se ha eliminado el importador en la base de datos");
        }
    }

    private int getUser()
    {
        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario != null)
        {
            return usuario.UsuarioId;
        }
        return 0;
    }

    private bool getRol()
    {

        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario.Roles == "Administrador" || usuario.Roles == "Empleado")
        {
            return paso = true;
        }
        return paso = false;
    }
}