@page "/Ventas"
@page "/Ventas/{VentaId:int}"

@using EIMRentaaCar.Models
@using EIMRentaaCar.BLL

@inject IToastService toast
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated && getRol())
{
    <EditForm Model="ventas" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <h1>Registro de ventas</h1>
            </div>
            <div class="card-body">
                <form>

                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>ID</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="ventas.VentaId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary" @onclick="Buscar"><i class="fa fa-search"></i> Buscar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <br />
                        <div class="col">
                            @*Fecha de la Renta*@
                            <div class="form-group">
                                <label>Fecha de la Renta</label>
                                <InputDate @bind-Value="ventas.FechaVenta" class="form-control col-4" />
                                <ValidationMessage For="@(() => ventas.FechaVenta)" />
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="row">
                            @* Cliente id *@
                            <div class="col">
                                <label>Cliente Cedula:</label>
                                <select class="form-control" @bind="ClienteSelecionado" @onclick="MostrarNombreCliente">
                                    @foreach (var item in ClienteCombo())
                                    {
                                        <option value="@item.ClienteId">@item.Cedula</option>
                                    }
                                </select>
                            </div>
                            @* cliente *@
                            <div class="col">
                                <label>El Cliente:</label>
                                <InputText class="form-control" readonly="true" @bind-Value="nombreCliente" />
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="row">
                            <div class="col">
                                <label>Vehiculo id</label>
                                <select class="form-control" @bind="Vehiculoseleccionado" @onclick="MostrarVehiculo">
                                    @foreach (var item in VehiculoCombo())
                                    {
                                        @if (item.Estado == "Disponible")
                                        {
                                            <option value="@item.VehiculoId">@item.VehiculoId</option>
                                        }
                                    }
                                </select>
                            </div>

                            <div class="col">
                                <label>Marca</label>
                                <InputText class="form-control" readonly="true" @bind-Value="Marca" />
                            </div>

                            <div class="col">
                                <label>Tipo</label>
                                <InputText class="form-control" readonly="true" @bind-Value="Tipo" />
                            </div>

                            <div class="col">
                                <label>Modelo</label>
                                <InputText class="form-control" readonly="true" @bind-Value="Modelo" />
                            </div>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="row">
                            <div class="col">
                                <label>Precio</label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="Precio" />
                            </div>
                            <div class="col">
                                <label>VIN</label>
                                <InputText class="form-control" readonly="true" @bind-Value="Vin" />
                            </div>
                            <div class="col">
                                <label>KM</label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="KM" />
                            </div>
                            <div class="col">
                                <label>Año</label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="Año" />
                            </div>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="col">
                            <label>No. Cuotas</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="ventas.Cuotas" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-info" @onclick="Agregar"><i class="fa fa-plus"> Agregar </i></button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <br />

                    @*Detalle*@
                    <div class="table-responsive text-nowrap">
                        <table class="table table-striped">
                            <thead class="thead-dark">
                                <tr>
                                    <th>#</th>
                                    <th>Monto</th>
                                    <th>Balance</th>
                                    <th>Estado de Pago</th>
                                    <th>        </th>
                                </tr>
                            </thead>
                            <tbody class="bg-white">
                                @foreach (var item in ventas.CuotaDetalles)
                                {
                                    <tr>
                                        <td>@item.Numero</td>
                                        <td>@item.Monto.ToString("N2")</td>
                                        <td>@item.Balance.ToString("N2")</td>
                                        <td><input type="checkbox" @bind="item.Pagada" /></td>
                                        <td><button type="button" class="btn btn-danger" @onclick="(() => EliminarOrdenDetalle(item))"><i class="oi oi-trash"></i> Remover</button> </td>
                                    </tr>
                                }

                            </tbody>

                        </table>
                    </div>

                    <div class="form-group">
                        <div class="row">
                            <div class="col">
                                <label>Balance</label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="ventas.Balance" />
                            </div>
                            <div class="col">
                                <label>Moto Tota</label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="ventas.MontoTotal" />
                            </div>
                        </div>
                    </div>

                </form>
            </div>
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="fa fa-plus"> Nuevo </i></button>
                    <button type="submit" class="btn btn-lg btn-success"><i class="fa fa-save"> Guardar </i></button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="fa fa-trash"> Eliminar </i></button>
                    <button type= "button" class="btn btn-lg btn-warning" data-toggle="modal" @onclick="PDF" data-target="#myModals"><i class="oi oi-print"></i> Imprimir</button>
                </div>
            </div>
        </div>
    </EditForm>
}


<div class="modal fade" id="myModals" tabindex="-1" role="dialog" aria-labelledby="myModalsLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content m-md-auto">
            <div class="modal-header">
                <button type="button" class="close text-danger" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title"></h4>
            </div>
            <div class="modal-body">
                <div style="text-align: center;">
                    <iframe src="@pdfContent" style="width:950px; height:600px;" frameborder="0"></iframe>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public int VentaId { get; set; }
    Ventas ventas = new Ventas();

    @*Datos del cliente*@
    public int ClienteSelecionado { get; set; }
    public string nombreCliente { get; set; }

    @*Datos del vehiculo*@
    public int Vehiculoseleccionado { get; set; }
    public string Marca { get; set; }
    public string Modelo { get; set; }
    public decimal Precio { get; set; }
    public string Vin { get; set; }
    public decimal KM { get; set; }
    public int Año { get; set; }
    public string Tipo { get; set; }

    @*Datos del usuario*@
Usuarios usuarios = new Usuarios();
public bool paso { get; set; }

public byte[] Data { get; set; }
public string pdfContent { get; set; }

public int contar { get; set; }

protected override void OnInitialized()
{
    Nuevo();
    if (VentaId > 0)
    {
        var Auxventas = VentasBLL.Buscar(VentaId);
        if (Auxventas != null)
            this.ventas = Auxventas;
        else
            toast.ShowWarning("No encontrado.");
    }

}

private void Nuevo()
{
    this.ventas = new Ventas();
    Marca = string.Empty;
    Modelo = string.Empty;
    Precio = 0;
    Vin = string.Empty;
    KM = 0;
    Año = 0;
    Tipo = string.Empty;
    nombreCliente = string.Empty;
    ClienteSelecionado = 0;
    Vehiculoseleccionado = 0;

}

private void Buscar()
{
    if (ventas.VentaId > 0)
    {
        var encontrado = VentasBLL.Buscar(ventas.VentaId);

        if (encontrado != null)
        {
            this.ventas = encontrado;
            Vehiculoseleccionado = ventas.VehiculoId;
            contar = ventas.Cuotas;
        }
        else
        {
            toast.ShowWarning("No encontrado");
            NotificacionBLL.Mensaje(getUser(), "Error", "No se ha encontrado la venta en la base de datos");
        }
    }
}

private void Guardar()
{
    if(ventas.Cuotas != contar)
    {
        toast.ShowInfo("No puedes agregar mas cuotas");
    }
    else
    {
        if (VehiculosBLL.Buscar(Vehiculoseleccionado).Estado == "Rentado")
        {
            toast.ShowError("No se puede realizar la venta por que el vehiculo fue rentado");

        }
        else
        {
            ventas.UsuarioId = getUser();
            bool guardo = VentasBLL.Guardar(ventas);

            if (guardo)
            {
                Nuevo();
                ClienteSelecionado = 0;
                Vehiculoseleccionado = 0;
                Marca = string.Empty;
                Modelo = string.Empty;
                Precio = 0;
                Vin = string.Empty;
                KM = 0;
                Año = 0;
                Tipo = string.Empty;
                nombreCliente = string.Empty;
                toast.ShowSuccess("Guardado correctamente");
                NotificacionBLL.Mensaje(getUser(), "Success", "Se ha guardado la venta en al base de datos");
            }
            else
            {
                toast.ShowError("No fue posible guardar");
                NotificacionBLL.Mensaje(getUser(), "Error", "No fue pos posible guardar la venta en la base de datos");
            }
        }
    }

}

private void Eliminar()
{
    bool elimino;

    elimino = VentasBLL.Eliminar(ventas.VentaId);

    if (elimino)
    {
        Nuevo();
        toast.ShowSuccess("Eliminado correctamente");
        NotificacionBLL.Mensaje(getUser(), "Success", "Se ha eliminado la venta en al base de datos");
    }
    else
    {
        toast.ShowError("No fue posible eliminar");
        NotificacionBLL.Mensaje(getUser(), "Error", "No fue posible eliminar la venta");
    }

}

private List<Clientes> ClienteCombo()
{
    List<Clientes> lista = new List<Clientes>();

    try
    {
        lista = ClientesBLL.GetList(c => true);
    }
    catch (Exception)
    {
        throw;
    }

    return lista;
}

private List<Vehiculos> VehiculoCombo()
{
    List<Vehiculos> lista = new List<Vehiculos>();

    try
    {
        lista = VehiculosBLL.GetList(c => true);
    }
    catch (Exception)
    {
        throw;
    }

    return lista;
}

private void MostrarNombreCliente()
{
    string auxVenta = string.Empty;

    var auxCliente = ClientesBLL.Buscar(ClienteSelecionado);
    if (auxCliente != null)
    {
        auxVenta = ClientesBLL.Buscar(auxCliente.ClienteId).Nombre;
        nombreCliente = auxVenta;
    }
    ventas.ClienteId = ClienteSelecionado;
}

private void MostrarVehiculo()
{
    var auxventa = VehiculosBLL.Buscar(Vehiculoseleccionado);
    if (auxventa != null)
    {
        Marca = auxventa.Marca;
        Modelo = auxventa.Modelo;
        Precio = auxventa.PrecioVenta + Convert.ToDecimal(auxventa.ITBIS);
        Vin = auxventa.Vin;
        KM = auxventa.Kilometraje;
        Año = auxventa.Año;
        Tipo = auxventa.Tipo;

        //aqui paso el precio del vehiculo al monto
        ventas.MontoTotal = Precio;

        if (auxventa.Estado == "Rentado")
        {
            toast.ShowError("Este vehiculo fue rentado");

        }
    }
    ventas.VehiculoId = Vehiculoseleccionado;
}

private void Agregar()
{
    if (ventas.Cuotas == 0)
    {
        toast.ShowWarning("Tiene que poner las cuotas.");
        return;
    }

    if (ClienteSelecionado == 0 && Vehiculoseleccionado == 0)
    {
        toast.ShowWarning("Tiene que seleccionar un cliente y un vehiculo Id");
        return;
    }

    if (ventas.Cuotas <= 0)
    {
        toast.ShowWarning("La cuotas debe ser mayor a 0.");
        return;
    }
    else
    {
        for (int i = 0; i < ventas.Cuotas; i++)
        {

            this.ventas.CuotaDetalles.Add(new CuotaDetalles
            {
                CuotaId = 0,
                VentaId = ventas.VentaId,
                UsuarioId = getUser(),
                Monto = (VehiculosBLL.Buscar(Vehiculoseleccionado).PrecioVenta + Convert.ToDecimal(VehiculosBLL.Buscar(Vehiculoseleccionado).ITBIS)) / ventas.Cuotas,
                Balance = (VehiculosBLL.Buscar(Vehiculoseleccionado).PrecioVenta + Convert.ToDecimal(VehiculosBLL.Buscar(Vehiculoseleccionado).ITBIS)) / ventas.Cuotas,
                Pagada = false,
                Numero = (1 + i)

            });
        }

        if (ventas.CuotaDetalles.Count > 0)
        {
            ventas.MontoCuotas = ventas.CuotaDetalles[0].Monto;
        }

        if (ventas.Cuotas != contar)
        {
            toast.ShowInfo("No puedes modificar la cuotas ya hechas");
        }

        CalcularBalance();
    }
}

private void EliminarOrdenDetalle(CuotaDetalles detalle)
{
    try
    {
        ventas.CuotaDetalles.Remove(detalle);
    }
    catch (Exception)
    {

        throw;
    }
}

private void CalcularBalance()
{
    ventas.Balance = 0;
    foreach (CuotaDetalles cuota in ventas.CuotaDetalles)
    {
        if (!cuota.Pagada)
        {
            ventas.Balance += cuota.Balance;
        }
    }

}

private int getUser()
{
    Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

    if (usuario != null)
    {
        return usuario.UsuarioId;
    }
    return 0;
}

private bool getRol()
{

    Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

    if (usuario.Roles == "Administrador" || usuario.Roles == "Empleado")
    {
        return paso = true;
    }
    return paso = false;
}


private void PDF()
{
    if (ventas == null)
    {
        toast.ShowInfo("No hay datos");
    }
    else
    {
        EIMRentaaCar.Pages.Reportes.FacturaVenta factura = new Reportes.FacturaVenta();

        Data = factura.Reporte(ventas);

        pdfContent = "data:application/pdf;base64,";
        pdfContent += System.Convert.ToBase64String(Data);
    }
}
}