@page "/Ventas"
@page "/Ventas/{VentaId:int}"

@using EIMRentaaCar.Models
@using EIMRentaaCar.BLL

@inject IToastService toast
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated && getRol())
{
    <EditForm Model="ventas" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <h1>registro de ventas</h1>
            </div>
            <div class="card-body">
                <form>

                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>ID</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="ventas.VentaId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary" @onclick="Buscar"><i class="fa fa-search"></i> Buscar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="row">
                            @* Cliente id *@
                            <div class="col">
                                <label>Cliente ID:</label>
                                <select class="form-control" @bind="ClienteSelecionado" @onclick="MostrarNombreCliente">
                                    @foreach (var item in ClienteCombo())
                                    {
                                        <option value="@item.ClienteId">@item.Cedula</option>
                                    }
                                </select>
                            </div>
                            @* cliente *@
                            <div class="col">
                                <label>El Cliente:</label>
                                <InputText class="form-control" readonly="true" @bind-Value="nombreCliente" />
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="row">
                            <div class="col">
                                <label>Vehiculo Id</label>
                                <select class="form-control" @bind="Vehiculoseleccionado" @onclick="MostrarVehiculo">
                                    @foreach (var item in VehiculoCombo())
                                    {
                                        <option value="@item.VehiculoId">@item.Vin</option>
                                    }
                                </select>
                            </div>

                            <div class="col">
                                <label>Marca</label>
                                <InputText class="form-control" readonly="true" @bind-Value="Marca" />
                            </div>

                            <div class="col">
                                <label>Tipo</label>
                                <InputText class="form-control" readonly="true" @bind-Value="Tipo" />
                            </div>

                            <div class="col">
                                <label>Modelo</label>
                                <InputText class="form-control" readonly="true" @bind-Value="Modelo" />
                            </div>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="row">
                            <div class="col">
                                <label>Precio</label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="Precio" />
                            </div>
                            <div class="col">
                                <label>VIN</label>
                                <InputText class="form-control" readonly="true" @bind-Value="Vin" />
                            </div>
                            <div class="col">
                                <label>KM</label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="KM" />
                            </div>
                            <div class="col">
                                <label>Año</label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="Año" />
                            </div>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="col">
                            <div class="input-group">
                                <InputNumber @bind-Value="ventas.Cuotas" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-info" @onclick="Agregar"><i class="fa fa-plus"> Agregar </i></button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <br />

                    @*Detalle*@
                    <div class="table-responsive text-nowrap">
                        <table class="table table-striped">
                            <thead class="thead-light">
                                <tr>
                                    <th>#</th>
                                    <th>Monto</th>
                                    <th>Balance</th>
                                    <th>Estado de Pago</th>
                                    <th>        </th>
                                </tr>
                            </thead>
                            <tbody class="bg-white">
                                @foreach (var item in ventas.CuotaDetalles)
                                {
                                    <tr>
                                        <td>@item.Numero</td>
                                        <td>@item.Monto</td>
                                        <td>@item.Balance</td>
                                        <td><input type="checkbox" @bind="item.Pagada" /></td>
                                        <td><button type="button" class="btn" @onclick="(() => EliminarOrdenDetalle(item))"><i class="oi oi-trash text-danger"></i></button></td>
                                    </tr>
                                }

                            </tbody>

                        </table>
                    </div>

                    <div class="form-group">
                        <div class="row">
                            <div class="col">
                                <label>Balance</label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="ventas.Balance" />
                            </div>
                            <div class="col">
                                <label>Moto Tota</label>
                                <InputNumber class="form-control" readonly="true" @bind-Value="ventas.MontoTotal" />
                            </div>
                        </div>
                    </div>

                </form>
            </div>
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="fa fa-plus"> Nuevo </i></button>
                    <button type="submit" class="btn btn-lg btn-success"><i class="fa fa-save"> Guardar </i></button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="fa fa-trash"> Eliminar </i></button>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {

    [Parameter]
    public int VentaId { get; set; }
    Ventas ventas = new Ventas();

    @*Datos del cliente*@
    public int ClienteSelecionado { get; set; }
    public string nombreCliente { get; set; }

    @*Datos del vehiculo*@
    public int Vehiculoseleccionado { get; set; }
    public string Marca { get; set; }
    public string Modelo { get; set; }
    public decimal Precio { get; set; }
    public string Vin { get; set; }
    public decimal KM { get; set; }
    public int Año { get; set; }
    public string Tipo { get; set; }

    @*Datos del usuario*@
    Usuarios usuarios = new Usuarios();
    public bool paso { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        if (VentaId > 0)
        {
            var Auxventas = VentasBLL.Buscar(VentaId);
            if (Auxventas != null)
                this.ventas = Auxventas;
            else
                toast.ShowWarning("No encontrado.");
        }
        ventas.UsuarioId = getUser();
    }

    private void Nuevo()
    {
        this.ventas = new Ventas();
        Marca = string.Empty;
        Modelo = string.Empty;
        Precio = 0;
        Vin = string.Empty;
        KM = 0;
        Año = 0;
        Tipo = string.Empty;
        nombreCliente = string.Empty;
        ClienteSelecionado = 0;
        Vehiculoseleccionado = 0;

    }

    private void Buscar()
    {
        if (ventas.VentaId > 0)
        {
            var encontrado = VentasBLL.Buscar(ventas.VentaId);

            if (encontrado != null)
            {
                this.ventas = encontrado;
                ClienteSelecionado = encontrado.ClienteId;
                Vehiculoseleccionado = encontrado.VehiculoId;
            }

            else
                toast.ShowWarning("No encontrado");
        }
    }

    private void Guardar()
    {
        if (VehiculosBLL.Buscar(Vehiculoseleccionado).Estado == "Rentado")
        {
            toast.ShowError("No se puede realizar la venta por que el vehiculo fue rentado");

        }
        else
        {
            bool guardo = VentasBLL.Guardar(ventas);

            if (guardo)
            {
                Nuevo();
                ClienteSelecionado = 0;
                Vehiculoseleccionado = 0;
                Marca = string.Empty;
                Modelo = string.Empty;
                Precio = 0;
                Vin = string.Empty;
                KM = 0;
                Año = 0;
                Tipo = string.Empty;
                nombreCliente = string.Empty;
                toast.ShowSuccess("Guardado correctamente");
            }
            else
                toast.ShowError("No fue posible guardar");
        }

    }

    private void Eliminar()
    {
        bool elimino;

        elimino = VentasBLL.Eliminar(ventas.VentaId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    private List<Clientes> ClienteCombo()
    {
        List<Clientes> lista = new List<Clientes>();

        try
        {
            lista = ClientesBLL.GetList(c => true);
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    private List<Vehiculos> VehiculoCombo()
    {
        List<Vehiculos> lista = new List<Vehiculos>();

        try
        {
            lista = VehiculosBLL.GetList(c => true);
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    private void MostrarNombreCliente()
    {
        string auxVenta = string.Empty;

        var auxCliente = ClientesBLL.Buscar(ClienteSelecionado);
        if (auxCliente != null)
        {
            auxVenta = ClientesBLL.Buscar(auxCliente.ClienteId).Nombre;
            nombreCliente = auxVenta;
        }
        ventas.ClienteId = ClienteSelecionado;
    }

    private void MostrarVehiculo()
    {
        var auxventa = VehiculosBLL.Buscar(Vehiculoseleccionado);
        if (auxventa != null)
        {
            Marca = auxventa.Marca;
            Modelo = auxventa.Modelo;
            Precio = auxventa.PrecioVenta;
            Vin = auxventa.Vin;
            KM = auxventa.Kilometraje;
            Año = auxventa.Año;
            Tipo = auxventa.Tipo;

            //aqui paso el precio del vehiculo al monto
            ventas.MontoTotal = Precio;

            if (auxventa.Estado == "Rentado")
            {
                toast.ShowError("Este vehiculo fue rentado");

            }
        }
        ventas.VehiculoId = Vehiculoseleccionado;
    }

    private void Agregar()
    {
        if (ventas.Cuotas == 0)
        {
            toast.ShowWarning("Tiene que poner las cuotas.");
            return;
        }

        if (ClienteSelecionado == 0 && Vehiculoseleccionado == 0)
        {
            toast.ShowWarning("Tiene que seleccionar un cliente y un vehiculo Id");
            return;
        }

        if (ventas.Cuotas <= 0)
        {
            toast.ShowWarning("La cuotas debe ser mayor a 0.");
            return;
        }
        else
        {
            for (int i = 0; i < ventas.Cuotas; i++)
            {
                this.ventas.CuotaDetalles.Add(new CuotaDetalles
                {
                    CuotaId = 0,
                    VentaId = ventas.VentaId,
                    UsuarioId = 0,
                    Monto = VehiculosBLL.Buscar(Vehiculoseleccionado).PrecioVenta / ventas.Cuotas,
                    Balance = VehiculosBLL.Buscar(Vehiculoseleccionado).PrecioVenta / ventas.Cuotas,
                    Pagada = false,
                    Numero = (1 + i)
                });
            }

            if (ventas.CuotaDetalles.Count > 0)
            {
                ventas.MontoCuotas = ventas.CuotaDetalles[0].Monto;
            }

            CalcularBalance();
        }
    }

    private void EliminarOrdenDetalle(CuotaDetalles detalle)
    {
        try
        {
            ventas.CuotaDetalles.Remove(detalle);
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void CalcularBalance()
    {
        ventas.Balance = 0;
        foreach (CuotaDetalles cuota in ventas.CuotaDetalles)
        {
            if (!cuota.Pagada)
            {
                ventas.Balance += cuota.Balance;
            }
        }

    }

    private int getUser()
    {
        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario != null)
        {
            return usuario.UsuarioId;
        }
        return 0;
    }

    private bool getRol()
    {

        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario.Roles == "Administrador" || usuario.Roles == "Empleado")
        {
            return paso = true;
        }
        return paso = false;
    }
}