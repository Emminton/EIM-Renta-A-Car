@page "/ConsultaCliente"

@using EIMRentaaCar.BLL
@using EIMRentaaCar.Models

@inject IToastService toast

<EditForm Model="lista">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Consultas De Clientes</h3>
        </div>

        <div class="card-body">
            <div class="input-group mb-4">
                <div class="input-group">

                    <label for="filtro">Filtro: </label>
                    <select class="form-control ml-3 mr-3" @bind="Filtro">
                        <option value="" disabled selected>Seleccione un filtro</option>
                        <option value="Todo">Todo</option>
                        <option value="Id">ID</option>
                        <option value="Nombre">Nombre</option>
                        <option value="Cedula">Cedula</option>
                    </select>

                    <label for="criterio ml-3 mr-3"> Criterio: </label>
                    <input type="search" class="form-control ml-3 mr-3" @bind-value="Criterio" />

                    <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar </button>
                </div>
            </div>

            <table class=" table mb-3 mt-3">
                <thead class="thead-light">
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Cedula</th>
                        <th>Telefono</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in lista)
                    {
                        <tr class="table-striped">
                            <td>@item.ClienteId</td>
                            <td>@item.Nombre</td>
                            <td>@item.Cedula</td>
                            <td>@item.Telefono</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <br />
        <div>
            <button class="btn btn-danger" @onclick="@(e => Navegar("first"))">@("<<")</button>
            <button class="btn btn-danger" @onclick="@(e => Navegar("prev"))">Prev</button>
            @for (int i = 0; i < TotalPages; i++)
            {
                var pageNumber = i;
                <button class="btn @(CurrentPage == pageNumber? "btn-dark":"btn-info")"
                        @onclick="@(e => UpdateList(pageNumber))">
                    @(i + 1)
                </button>
            }
            <button class="btn btn-danger" @onclick="@(e => Navegar("next"))">Next</button>
            <button class="btn btn-danger" @onclick="@(e => Navegar("last"))">@(">>")</button>
        </div>
    </div>
</EditForm>


@code { 

    private List<Clientes> lista { get; set; }
    private List<Clientes> listas { get; set; }// lista necesaria para nevegar entre pagina

    private string Filtro { get; set; }
    private string Criterio { get; set; }
    private decimal TotalInventario { get; set; }
    public string mensaje;

    //datos para la paginacion
    public int PageSize { get; set; }
    public int TotalPages { get; set; }
    public int CurrentPage { get; set; }

    protected override void OnInitialized()
    {
        lista = new List<Clientes>();
        PageSize = 5;

        if (listas != null)
        {
            lista = listas.Take(PageSize).ToList();
            TotalPages = (int)Math.Ceiling(listas.Count() / (decimal)PageSize);
        }
    }


    private void UpdateList(int pageNumber = 0)
    {
        if (listas != null)
        {
            //pageNumber * pageSize -> take 5
            lista = listas.Skip(pageNumber * PageSize).Take(PageSize).ToList();
            TotalPages = (int)Math.Ceiling(listas.Count() / (decimal)PageSize);
            CurrentPage = pageNumber;
        }
    }

    private void Navegar(string direction)
    {
        if (direction == "prev" && CurrentPage != 0)
            CurrentPage -= 1;
        if (direction == "next" && CurrentPage != TotalPages - 1)
            CurrentPage += 1;
        if (direction == "first")
            CurrentPage = 0;
        if (direction == "last")
            CurrentPage = TotalPages - 1;

        UpdateList(CurrentPage);
    }

    private void Buscar()
    {
        try
        {
            if (Filtro == null)
            {
                toast.ShowWarning("Debe seleccionar un Filtro", "Aviso");
            }
            else
            {
                lista = ClientesBLL.GetList(a => true);

                if (lista.Count == 0)
                {
                    toast.ShowWarning("No hay Articulos Registrados", "Aviso");
                }
                else
                {
                    mensaje = "";
                    switch (Filtro)
                    {
                        case "Todo":
                            lista = ClientesBLL.GetList(e => true);
                            break;
                        case "ID":
                            lista = ClientesBLL.GetList(e => e.ClienteId == Convert.ToInt32(Criterio));
                            break;
                        case "Nombre":
                            lista = ClientesBLL.GetList(e => e.Nombre == Criterio);
                            break;
                        case "Cedula":
                            lista = ClientesBLL.GetList(e => e.Cedula == Criterio);
                            break;

                    }
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
}

