@page "/ConsultaRentas"

@using EIMRentaaCar.BLL
@using EIMRentaaCar.Models

@inject IToastService toast

<EditForm Model="listapaginada">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Consultas De Rentas</h3>
        </div>

        <div class="card-body">
            <div class="input-group mb-4">
                <div class="input-group">

                    <label for="filtro">Filtro: </label>
                    <select class="form-control ml-3 mr-3" @bind="Filtro">
                        <option value="" disabled selected>Seleccione un filtro</option>
                        <option value="Todo">Todo</option>
                        <option value="ID">Vehiculo ID</option>
                        <option value="Cliente">Cliente</option>
                    </select>

                    <label for="criterio ml-3 mr-3"> Criterio: </label>
                    <input type="search" class="form-control ml-3 mr-3" @bind-value="Criterio" />

                    <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar </button>
                </div>
            </div>

            <table class=" table mb-3 mt-3">
                <thead class="thead-light">
                    <tr>
                        <th>Vehiculo ID</th>
                        <th>Cliente</th>
                        <th>Dias Renta</th>
                        <th>Fecha</th>
                        <th>Balance</th>
                    </tr>
                </thead>
                <tbody>
                    @if (listapaginada.Count == 0)
                    {
                        toast.ShowWarning("No hay datos");
                    }
                    else
                    {
                        @foreach (var item in listapaginada)
                        {
                            <tr class="table-striped">
                                <td>@item.VehiculoId</td>
                                <td>@ClientesBLL.Buscar(item.ClienteId).Nombre</td>
                                <td>@item.TiempoRenta</td>
                                <td>@item.FechaRenta.ToString("MM/dd/yyyy")</td>
                                <td>@item.Balance.ToString("N2")</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="form-group">
            <div class="row">

                <div class="col-2">
                    <label><strong>Total de Rentas </strong></label>
                    <InputNumber class="form-control" readonly="true" @bind-Value="AcomularPrecio" />
                </div>
                <div class="form-group col-2 col-md-2 ml-md-auto">
                    <label><strong>Vehiculos Rentados</strong></label>
                    <InputNumber class="form-control" readonly="true" @bind-Value="ContarRenta" />
                </div>
            </div>
        </div>
        <div class="card-footer text-center">
            <button class="btn btn-outline-success" data-toggle="modal" @onclick="PDF" data-target="#myModals"><i class="oi oi-print"></i> Generar Reporte</button>
        </div>
        <div class="form-row col-12 justify-content-center">
            <nav>
                <ul class="pagination">
                    <li class="page-item bt">
                        <a class="page-link" @onclick="PaginaAnterior">
                            <span class="oi oi-media-skip-backward "></span>
                        </a>
                    </li>

                    @for (int i = 1; i <= Paginas; i++)
                    {
                        <li class=" @(PaginaActual == i ? "text-danger" : "page-item")" @onclick="Mover"> <a class="page-link disabled">@i</a></li>

                    }

                    <li class="page-item">
                        <a class="page-link" @onclick="PaginaSiguiente">
                            <span class="oi oi-media-skip-forward "></span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</EditForm>

<div class="modal fade" id="myModals" tabindex="-1" role="dialog" aria-labelledby="myModalsLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content m-md-auto">
            <div class="modal-header">
                <button type="button" class="close text-danger" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title"></h4>
            </div>
            <div class="modal-body">
                <div style="text-align: center;">
                    <iframe src="@pdfContent" style="width:950px; height:600px;" frameborder="0"></iframe>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>


@code {
    private List<Rentas> lista { get; set; }
    private List<Rentas> listapaginada { get; set; }

    double Paginas = 0;
    double Elementos = 0;
    int PaginaActual = 0;

    public byte[] Data { get; set; }
    public string pdfContent { get; set; }

    public decimal AcomularPrecio { get; set; }
    public int ContarRenta { get; set; }
    public int Disponibilidad { get; set; }

    Paginacion paginacion = new Paginacion();

    private string Filtro { get; set; }
    private string Criterio { get; set; }

    protected override void OnInitialized()
    {
        lista = RentasBLL.GetList(C => true);
        Filtro = "Todo";
        IniciarPaginacion();
    }

    private void PDF()
    {
        EIMRentaaCar.Pages.Reportes.ReportRentas reportes = new Reportes.ReportRentas();

        Data = reportes.Reporte();

        pdfContent = "data:application/pdf;base64,";
        pdfContent += System.Convert.ToBase64String(Data);
    }

    private void TotalPrecio()

    {
        foreach (var item in Datos())
        {
            AcomularPrecio += item.Balance;
            ContarRenta += item.VehiculoId;
        }
    }

    private List<Rentas> Datos()
    {
        try
        {
            List<Rentas> lista = RentasBLL.GetList(v => true);
        }
        catch (Exception)
        {
            throw;
        }
        return lista;
    }


    private void ContarVehiculo()
    {
        try
        {
            List<Vehiculos> lista = VehiculosBLL.GetList(v => true && v.Estado == "Rentado");
        }
        catch (Exception)
        {
            throw;
        }
        Disponibilidad = lista.Count();
    }

    public void IniciarPaginacion()
    {
        PaginaActual = 1;
        Elementos = lista.Count();
        Paginas = Math.Ceiling(Elementos / paginacion.Mostrar);
        listapaginada = lista.Take(paginacion.Mostrar).ToList();
        ContarVehiculo();
        TotalPrecio();
    }

    private void PaginaSiguiente()
    {
        if (PaginaActual < Paginas)
        {
            PaginaActual++;
            listapaginada = lista
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
    }

    private void Mover()
    {
        if (PaginaActual < Paginas)
        {
            PaginaActual++;
            listapaginada = lista
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
        else if (PaginaActual > 1)
        {
            PaginaActual--;
            listapaginada = lista
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
    }


    private void PaginaAnterior()
    {
        if (PaginaActual > 1)
        {
            PaginaActual--;
            listapaginada = lista
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
    }

    private void Buscar()
    {
        try
        {
            if (Filtro == null)
            {
                toast.ShowWarning("Debe seleccionar un Filtro", "Aviso");
            }
            else
            {
                lista = RentasBLL.GetList(a => true);

                if (lista.Count == 0)
                {
                    toast.ShowWarning("No hay Articulos Registrados", "Aviso");
                }
                else
                {

                    switch (Filtro)
                    {
                        case "Todo":
                            lista = RentasBLL.GetList(e => true);
                            break;
                        case "ID":
                            lista = RentasBLL.GetList(e => e.RentaId == Convert.ToInt32(Criterio));
                            break;
                        case "Cliente":
                            lista = RentasBLL.GetList(e=> ClientesBLL.Buscar(e.ClienteId).Nombre == Criterio);
                            break;
                    }
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
}