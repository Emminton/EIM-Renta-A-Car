@page "/Notify"

@using EIMRentaaCar.Models
@using EIMRentaaCar.BLL

@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <div class="container">
        @foreach (var item in lista)
        {
            @if (item.UsuarioId == getUser() && item.visto == false) // aqui valido si la notificacion no fueron leidas por el usuario
            {
                <div class="list-group w-50">
                    <a class="list-group-item list-group-item-action">
                        <div class="d-flex w-100 justify-content-between">
                            @if (item.Titulo == "Error")
                            {
                                <h4 class="text-danger"><i class="fa fa-warning ">&nbsp;</i>@item.Titulo</h4> }
                            else if (item.Titulo == "Success")
                            {
                                <h4 class="text-success"><i class="fa fa-check ">&nbsp;</i>@item.Titulo</h4> }
                            else if (item.Titulo == "Info")
                            {
                                <h4 class="text-info"><i class="fa fa-info ">&nbsp;</i>@item.Titulo</h4> }
                            else
                            {
                                <h4>@item.Titulo</h4>
                            }
                            <small>@item.Fecha</small>
                        </div>
                        <p>@item.Asunto</p>
                        <br />
                        <span type="button" class="btn btn-danger" @onclick="(() => Eliminar(item.NotificacionId))"><i class="oi oi-trash "></i>&nbsp;Eliminar</span>
                        <span type="button" class="btn btn-info" @onclick="(() => Leido(item))"><i class="oi oi-eye ">&nbsp;Marcar como leido</i></span>
                    </a>
                </div>
            }
        }
    </div>
  
}

@code{ 

    Notificaciones notificaciones = new Notificaciones();
    public List<Notificaciones> lista { get; set; }

    protected override void OnInitialized()
    {

        lista = NotificacionBLL.GetList(n => true);
    }

    private int getUser()
    {
        Usuarios usuario = UsuarioBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario != null)
        {
            return usuario.UsuarioId;
        }
        return 0;
    }

    private void Eliminar(int id) //aqui se elimina la notificación
    {
        bool elimino;

        elimino = NotificacionBLL.Eliminar(id);

        if (elimino)
        {
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    private void Leido(Notificaciones notificaciones) // aqui modifico la notificacion a leida o vista
    {
        bool paso = true;
        notificaciones.visto = paso;
        if (NotificacionBLL.Guardar(notificaciones))
        {
            toast.ShowSuccess("Has leido la notificacion");
        }

    }
}
